// ==================== –ò–ú–ü–û–†–¢ –ú–û–î–£–õ–ï–ô ====================
const express = require("express");
const mysql = require("mysql2");
const path = require("path");
const urlencodedParser = express.urlencoded({ extended: false }); 

// ==================== –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================
const app = express();
const PORT = 3000;

// ==================== MIDDLEWARE ====================
// –ü–∞—Ä—Å–∏–Ω–≥ URL-encoded –¥–∞–Ω–Ω—ã—Ö (–∏–∑ —Ñ–æ—Ä–º)
app.use(express.urlencoded({ extended: false }));

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö
app.use(express.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
app.use(express.static(path.join(__dirname, "public")));

// ==================== –ù–ê–°–¢–†–û–ô–ö–ê –®–ê–ë–õ–û–ù–ò–ó–ê–¢–û–†–ê ====================
app.set("view engine", "hbs");
app.set("views", path.join(__dirname, "views"));

// ==================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ====================
const pool = mysql.createPool({
    connectionLimit: 10, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    host: "localhost",
    user: "root",
    password: "Daniyar", 
    database: "Comp",
    waitForConnections: true,
    queueLimit: 0
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
pool.getConnection((err, connection) => {
    if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err.message);
        return;
    }
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL");
    connection.release();
});

// ==================== –ë–ê–ó–û–í–´–ï –ú–ê–†–®–†–£–¢–´ ================================

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", (req, res) => {
    res.render("index", {
        title: "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
        pageName: "–ì–ª–∞–≤–Ω–∞—è"
    });
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –Ω–∞—Å"
app.get("/about", (req, res) => {
    res.render("about", {
        title: "–û –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ",
        pageName: "–û –Ω–∞—Å"
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
app.get("/tovars", function (req, res) {
    // –û—Å–Ω–æ–≤–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Tovars
    let query = "SELECT * FROM Tovars";
    let filters = []; // –£—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    let params = []; // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SQL-–∑–∞–ø—Ä–æ—Å–∞

    // –û—Å–Ω–æ–≤–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Firms
    let queryFirm = "SELECT * FROM Firms";
    let filtersFirm = []; // –£—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    let paramsFirm = []; // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SQL-–∑–∞–ø—Ä–æ—Å–∞

    let firmId = req.query.firmId;
    let devId = req.query.devId;

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–í—Å–µ —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º devId –≤ undefined
    if (devId == 0) devId = undefined;

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ DevId
    if (devId) {
        filters.push("DevId = ?"); // –£—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã Tovars
        params.push(devId); // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SQL-–∑–∞–ø—Ä–æ—Å–∞

        filtersFirm.push("DevId = ?"); // –£—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã Firms
        paramsFirm.push(devId); // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SQL-–∑–∞–ø—Ä–æ—Å–∞

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å FirmId
        if (firmId != 0 && firmId != undefined) {
            filters.push("FirmId = ?"); // –£—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã Tovars
            params.push(firmId); // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SQL-–∑–∞–ø—Ä–æ—Å–∞
        }
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Tovars
    if (filters.length) {
        query += " WHERE " + filters.join(" AND ");
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Firms
    if (filtersFirm.length) {
        queryFirm += " WHERE " + filtersFirm.join(" AND ");
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Devices
    pool.query("SELECT * FROM Devices", function (err, devices) {
        if (err) return console.log(err);

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Firms
        pool.query(queryFirm, paramsFirm, function (err, firms) {
            if (err) return console.log(err);

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã Tovars
            pool.query(query, params, function (err, tovars) {
                if (err) return console.log(err);

                // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                res.render("Tovars.hbs", {
                    Devices: devices,
                    Firms: firms,
                    Tovars: tovars,
                    curDevId: devId,
                    curFirmId: firmId
                });
            });
        });
    });
});
app.post("/tovars/postAddTovar", urlencodedParser, function (req, res) {
    if (!req.body) return res.sendStatus(400);
    
    const { TovarId, TovarName, Price, Kol } = req.body;
    
    pool.query("INSERT INTO Tovars (TovarId, TovarName, Price, Kol) VALUES (?, ?, ?, ?)",
        [TovarId, TovarName, Price, Kol], function (err, data) {
            if (err) return console.log(err);
            res.redirect("/tovars");
        });
});

app.get("/tovars/editTovar/:TovarId", function (req, res) {
    const TovarId = req.params.TovarId;
    pool.query("SELECT * FROM Tovars WHERE TovarId=?", [TovarId], function (err, tovars) {
        if (err) return console.log(err);
        res.render("editTovar.hbs", {
            tovar: tovars[0]
        });
    });
});

app.post("/tovars/postEditTovar", urlencodedParser, function (req, res) {
    if (!req.body) return res.sendStatus(400);
    
    const { TovarId, TovarName, Price, Kol } = req.body;
    
    pool.query("UPDATE Tovars SET TovarName=?, Price=?, Kol=? WHERE TovarId=?",
        [TovarName, Price, Kol, TovarId], function (err, data) {
            if (err) return console.log(err);
            res.redirect("/tovars");
        });
});

app.post("/tovars/deleteTovar/:TovarId", function (req, res) {
    const TovarId = req.params.TovarId;
    pool.query("DELETE FROM Tovars WHERE TovarId=?", [TovarId], function (err, data) {
        if (err) return console.log(err);
        res.redirect("/tovars");
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
    res.status(404).render("404", {
        title: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        pageName: "404"
    });
});

// ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================
app.listen(PORT, (error) => {
    if (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
        return;
    }
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${__dirname}`);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = app;