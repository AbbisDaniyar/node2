

const express = require("express");
const mysql = require("mysql2");

const app = express();
const urlencodedParser = express.urlencoded({ extended: false });

app.set("view engine", "hbs");

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
let cart = [];

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = mysql.createPool({
    connectionLimit: 10, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    host: "localhost",
    user: "root",
    password: "Daniyar", 
    database: "Comp",
    waitForConnections: true,
    queueLimit: 0
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
pool.getConnection((err, connection) => {
    if (err) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err.message);
    } else {
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL");
        connection.release();
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", function (req, res) {
    res.render("Index.hbs");
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –Ω–∞—Å"
app.get("/about", function (req, res) {
    res.render("About.hbs");
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
app.get("/tovars", function (req, res) {
    let query = "SELECT * FROM Tovars";
    let filters = [];
    let params = [];

    let queryFirm = "SELECT * FROM Firms";
    let filtersFirm = [];
    let paramsFirm = [];

    let firmId = req.query.firmId;
    let devId = req.query.devId;

    if (devId == 0) devId = undefined;

    if (devId) {
        filters.push("DevId = ?");
        params.push(devId);

        filtersFirm.push("DevId = ?");
        paramsFirm.push(devId);

        if (firmId != 0 && firmId != undefined) {
            filters.push("FirmId = ?");
            params.push(firmId);
        }
    }

    if (filters.length) {
        query += " WHERE " + filters.join(" AND ");
    }

    if (filtersFirm.length) {
        queryFirm += " WHERE " + filtersFirm.join(" AND ");
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º Devices
    pool.query("SELECT * FROM Devices", function (err, devices) {
        if (err) return console.log(err);

        // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º Firms
        pool.query(queryFirm, paramsFirm, function (err, firms) {
            if (err) return console.log(err);

            // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º Tovars
            pool.query(query, params, function (err, tovars) {
                if (err) return console.log(err);

                res.render("Tovars.hbs", {
                    Devices: devices,
                    Firms: firms,
                    Tovars: tovars,
                    curDevId: devId,
                    curFirmId: firmId,
                    cartLen: cart.length
                });
            });
        });
    });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
app.get("/sales/addToCart/:TovarId", function (req, res) {
    const TovarId = req.params.TovarId;
    
    pool.query("SELECT * FROM Tovars WHERE TovarId=?", [TovarId], function (err, tovar) {
        if (err) return console.log(err);
        
        if (tovar[0]) {
            cart.push(tovar[0]);
            console.log(`‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: ${tovar[0].TovarName}`);
        }
        
        res.redirect("/tovars");
    });
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
app.get("/sales/getCart", function (req, res) {
    const totalPrice = cart.reduce((total, tovar) => total + parseFloat(tovar.Price), 0);
    
    pool.query("SELECT * FROM Clients", function (err, clients) {
        if (err) return console.log(err);
        
        res.render("Cart.hbs", {
            cartTovars: cart,
            totalPrice: totalPrice,
            Clients: clients
        });
    });
});

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.post("/sales/cartToHistory", urlencodedParser, function (req, res) {
    if (!req.body) return res.sendStatus(400);
    
    const clientId = req.body.clientId;
    const dateDay = new Date().getDate();
    const dateMonth = new Date().getMonth() + 1;
    
    if (clientId == 0) {
        return res.redirect("/sales/getCart");
    }
    
    if (cart.length === 0) {
        res.redirect("/tovars");
        return;
    }
    
    let completed = 0;
    cart.forEach(tovar => {
        pool.query("INSERT INTO History (TovarId, ClientId, dateDay, dateMonth) VALUES (?, ?, ?, ?)",
            [tovar.TovarId, clientId, dateDay, dateMonth], function (err) {
                if (err) console.log(err);
                
                completed++;
                if (completed === cart.length) {
                    console.log(`‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
                    cart = [];
                    res.redirect("/tovars");
                }
            });
    });
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
app.get("/sales/getHistory/:ClientId", function (req, res) {
    const clientId = req.params.ClientId;
    
    pool.query(`SELECT h.*, t.TovarName, c.ClientName 
                FROM History h 
                JOIN Tovars t ON h.TovarId = t.TovarId 
                JOIN Clients c ON h.ClientId = c.ClientId 
                WHERE h.ClientId=?`, 
                [clientId], function (err, history) {
        if (err) return console.log(err);
        
        res.render("History.hbs", {
            History: history
        });
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
app.get("/clients", function (req, res) {
    pool.query("SELECT * FROM Clients", function (err, clients) {
        if (err) return console.log(err);
        
        res.render("Clients.hbs", {
            Clients: clients
        });
    });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
app.get("/clients/addClient", function (req, res) {
    res.render("addClient.hbs");
});

app.post("/clients/postAddClient", urlencodedParser, function (req, res) {
    if (!req.body) return res.sendStatus(400);
    
    const ClientId = req.body.ClientId;
    const ClientName = req.body.ClientName;
    const BirthYear = req.body.BirthYear;
    const Address = req.body.Address;
    const Phone = req.body.Phone;
    
    pool.query("INSERT INTO Clients (ClientId, ClientName, BirthYear, Address, Phone) VALUES (?, ?, ?, ?, ?)",
        [ClientId, ClientName, BirthYear, Address, Phone], function (err) {
            if (err) return console.log(err);
            res.redirect("/clients");
        });
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
app.get("/clients/editClient/:ClientId", function (req, res) {
    const clientId = req.params.ClientId;
    
    pool.query("SELECT * FROM Clients WHERE ClientId=?", [clientId], function (err, clients) {
        if (err) return console.log(err);
        
        res.render("editClient.hbs", {
            client: clients[0]
        });
    });
});

app.post("/clients/postEditClient", urlencodedParser, function (req, res) {
    if (!req.body) return res.sendStatus(400);
    
    const ClientId = req.body.ClientId;
    const ClientName = req.body.ClientName;
    const BirthYear = req.body.BirthYear;
    const Address = req.body.Address;
    const Phone = req.body.Phone;
    
    pool.query("UPDATE Clients SET ClientName=?, BirthYear=?, Address=?, Phone=? WHERE ClientId=?",
        [ClientName, BirthYear, Address, Phone, ClientId], function (err) {
            if (err) return console.log(err);
            res.redirect("/clients");
        });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.get("/tovars/addTovar", function (req, res) {
    res.render("addTovar.hbs");
});

app.post("/tovars/postAddTovar", urlencodedParser, function (req, res) {
    if (!req.body) return res.sendStatus(400);
    
    const TovarId = req.body.TovarId;
    const TovarName = req.body.TovarName;
    const Price = req.body.Price;
    const Kol = req.body.Kol;
    
    pool.query("INSERT INTO Tovars (TovarId, TovarName, Price, Kol) VALUES (?, ?, ?, ?)",
        [TovarId, TovarName, Price, Kol], function (err) {
            if (err) return console.log(err);
            res.redirect("/tovars");
        });
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.get("/tovars/editTovar/:TovarId", function (req, res) {
    const TovarId = req.params.TovarId;
    
    pool.query("SELECT * FROM Tovars WHERE TovarId=?", [TovarId], function (err, tovars) {
        if (err) return console.log(err);
        
        res.render("editTovar.hbs", {
            tovar: tovars[0]
        });
    });
});

app.post("/tovars/postEditTovar", urlencodedParser, function (req, res) {
    if (!req.body) return res.sendStatus(400);
    
    const Kol = req.body.Kol;
    const Price = req.body.Price;
    const TovarId = req.body.TovarId;
    
    pool.query("UPDATE Tovars SET Price=?, Kol=? WHERE TovarId=?",
        [Price, Kol, TovarId], function (err) {
            if (err) return console.log(err);
            res.redirect("/tovars");
        });
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.post("/tovars/deleteTovar/:TovarId", function (req, res) {
    const TovarId = req.params.TovarId;
    
    pool.query("DELETE FROM Tovars WHERE TovarId=?", [TovarId], function (err) {
        if (err) return console.log(err);
        res.redirect("/tovars");
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(3000, function () {
    console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000");
    console.log("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: " + process.cwd());
});